---
ingress_hostname: ""

k3s_helm_config:
  - name: traefik
    namespace: kube-system
    values_content: |
      # custom values from https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
      image:
        repository: traefik
        tag: v2.11.3
      globalArguments:
      - --providers.kubernetescrd.allowexternalnameservices=true
      - --providers.kubernetescrd.allowCrossNamespace=true
      - --api.insecure=true
      - --log.level=info
      metrics:
        prometheus:
          service:
            enabled: true
          serviceMonitor:
            interval: 30s

cert_manager_helm_version: v1.15.0
cert_manager_cluster_issuer_spec:
  selfSigned: {}
cert_manager_cluster_issuer_secret_name:
cert_manager_cluster_issuer_secret_data:

external_dns_helm_version: 1.14.5
external_dns_secret_name:
external_dns_secret_data:
external_dns_helm_values:

kubernetes_reflector_helm_version: 7.1.262
kubernetes_reflector_helm_values: {}

security_enabled: false
security_github_client_id:
security_github_client_secret:
security_github_organization:
security_cookie_expiration: "168h"
security_oauth2_helm_version: 7.7.3
security_oauth2_debug: true
security_oauth2_helm_values:
  fullnameOverride: oauth2-proxy

  config:
    clientID: "{{ security_github_client_id }}"
    clientSecret: "{{ security_github_client_secret }}"
    cookieSecret: "{{ lookup('community.general.random_string', length=16, special=False) }}"

  extraArgs:
    provider: "github"
    github-org: "{{ security_github_organization }}"
    skip-provider-button: false

    code-challenge-method: S256
    reverse-proxy: true
    show-debug-on-error: true
    upstream: "static://202"

    cookie-csrf-expire: "1h"
    cookie-domain: ".{{ ingress_hostname }}"
    cookie-expire: "{{ security_cookie_expiration }}"
    cookie-samesite: "lax"
    cookie-secure: true
    whitelist-domain: ".{{ ingress_hostname }}"

    pass-access-token: true
    pass-authorization-header: true
    pass-host-header: true
    pass-user-headers: true
    set-authorization-header: true
    set-xauthrequest: true
    ssl-insecure-skip-verify: true
    ssl-upstream-insecure-skip-verify: true
  ingress:
    enabled: true
    className: traefik
    path: /oauth2
    pathType: Prefix
    hosts:
      - "security-oauth.{{ ingress_hostname }}"
      - "*.{{ ingress_hostname }}"
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure

longhorn_enabled: true
longhorn_enabled_only_agent: false
longhorn_helm_version: 1.6.2
longhorn_replica_count: 2
longhorn_data_dir: /var/lib/longhorn/
longhorn_helm_values:
  global:
    nodeSelector:
      "longhorn.io/enabled": "true"

    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
  defaultSettings:
    defaultDataPath: "{{ longhorn_data_dir }}"
  persistence:
    defaultClassReplicaCount: "{{ longhorn_replica_count }}"
    defaultNodeSelector:
      enable: "{{ longhorn_enabled_only_agent }}"
      selector: "AGENT_NODE"
  metrics:
    serviceMonitor:
      enabled: "{{ enable_service_monitors }}"
  ingress:
    enabled: true
    ingressClassName: "traefik"
    host: "system-longhorn.{{ ingress_hostname }}"
    path: /
    pathType: Prefix
    tls: false
    secureBackends: false
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.middlewares: "{% if security_enabled %}security-security-oauth2@kubernetescrd{% endif %}"

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Longhorn"
      gethomepage.dev/pod-selector: "app=longhorn-ui"
      gethomepage.dev/description: "Cloud-Native distributed storage built on and for Kubernetes"
      gethomepage.dev/group: "System"
      gethomepage.dev/icon: "longhorn.png"

sealed_secrets_enabled: true
sealed_secrets_helm_version: 2.15.4
sealed_secrets_key: ~/.sealed_secrets/sealed-secrets-key.json
sealed_secrets_restore: "true"

argocd_enabled: true
argocd_helm_version: 7.1.3
argocd_namespaces:
  - default
argocd_helm_secrets:
  security.yaml: |
    security_github_client_id: "{{ security_github_client_id }}"
    security_github_client_secret: "{{ security_github_client_secret }}"
    security_github_organization: "{{ security_github_organization }}"
argocd_helm_values:
  global:
    logging:
      level: "debug"
  configs:
    params:
      application.namespaces: "{{ argocd_namespaces | join(', ') }}"
      dexserver.disable.tls: true
      server.disable.auth: "{{ not (security_enabled | lower == 'true') }}"
      server.insecure: true
    cm:
      admin.enabled: "{{ not (security_enabled | lower == 'true') }}"
      exec.enabled: true
      users.anonymous.enabled: "{{ not (security_enabled | lower == 'true') }}"
      url: "https://automation-argo-cd.{{ ingress_hostname }}"
      dex.config: |
        connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: $security_github_client_id
              clientSecret: $security_github_client_secret
              redirectURI: 'https://automation-argo-cd.{{ ingress_hostname }}/api/dex/callback'
              orgs:
              - name: $security_github_organization
    cmp:
      create: true
      plugins:
        helmfile:
          allowConcurrency: true
          discover:
            fileName: "helmfile.yaml*"
          generate:
            command:
              - bash
              - "-c"
              - |
                PARAMS=()

                if [[ -v ARGOCD_APP_NAMESPACE ]]; then
                  PARAMS+=(-n $ARGOCD_APP_NAMESPACE)
                fi

                if [[ -v ENV_NAME ]]; then
                  PARAMS+=(-e $ENV_NAME)
                elif [[ -v ARGOCD_ENV_ENV_NAME ]]; then
                  PARAMS+=(-e $ARGOCD_ENV_ENV_NAME)
                fi

                PARAMS+=(template --include-crds -q)

                if [[ -v ARGOCD_APP_NAMESPACE ]]; then
                  PARAMS+=(-n $ARGOCD_APP_NAMESPACE)
                fi

                for f in $(ls /helm-values/); do
                  PARAMS+=(--state-values-file /helm-values/$f)
                done

                helmfile "${PARAMS[@]}"
          lockRepo: false
    rbac:
      policy.default: "role:admin"

    secret:
      extra:
        security_github_client_id: "{{ security_github_client_id }}"
        security_github_client_secret: "{{ security_github_client_secret }}"
        security_github_organization: "{{ security_github_organization }}"
  applicationSet:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  dex:
    enable: "{{ security_enabled }}"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  repoServer:
    clusterRoleRules:
      enabled: true
    metrics:
      enabled: true
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
    extraContainers:
      - name: helmfile
        image: ghcr.io/helmfile/helmfile:v0.163.1
        command: ["/var/run/argocd/argocd-cmp-server"]
        env:
          - name: HELM_CACHE_HOME
            value: /tmp/helm/cache
          - name: HELM_CONFIG_HOME
            value: /tmp/helm/config
          - name: HELMFILE_CACHE_HOME
            value: /tmp/helmfile/cache
          - name: HELMFILE_TEMPDIR
            value: /tmp/helmfile/tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: helmfile.yaml
            name: argocd-cmp-cm
          - mountPath: /tmp
            name: helmfile-tmp
          - name: helm-values
            mountPath: /helm-values/
    volumeMounts:
      - name: helm-values
        mountPath: /helm-values/
    volumes:
      - name: argocd-cmp-cm
        configMap:
          name: argocd-cmp-cm
      - name: helmfile-tmp
        emptyDir: {}
      - name: helm-values
        secret:
          secretName: argocd-helm-values
          optional: true
  server:
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      ingressClassName: "traefik"
      hostname: "automation-argo-cd.{{ ingress_hostname }}"
      path: /
      tls: false

      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure

        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Argo CD"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=argocd-server"
        gethomepage.dev/description: "Declarative Continuous Deployment for Kubernetes"
        gethomepage.dev/group: "Automation"
        gethomepage.dev/icon: "argocd.png"
  extraObjects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-helm-values
      stringData: "{{ argocd_helm_secrets }}"

k8s_device_plugin_enabled: true
k8s_device_plugin_helm_version: 0.16.0-rc.1
k8s_device_plugin_helm_values:
  runtimeClassName: nvidia
