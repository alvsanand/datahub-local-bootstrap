---
# - name: Display all variables/facts known for a host
#   debug:
#     msg: "{{ingress_hostname}}"
#   tags: debug_info

- name: K8s - Set context
  ansible.builtin.shell: |
    kubectl config use-context {{ k3s_context_name }}
  changed_when: true

- name: traefik
  block:
    - name: traefik - Enable traefik dashboard
      kubernetes.core.k8s:
        namespace: kube-system
        definition: "{{ lookup('ansible.builtin.template', 'traefik_dashboard.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present
    - name: traefik - Create middleware
      kubernetes.core.k8s:
        namespace: kube-system
        definition: "{{ lookup('ansible.builtin.template', 'traefik_middleware_path.yaml.j2', template_vars = {'replace_path_src': 'traefik', 'replace_path_dst': 'dashboard', 'name': 'traefik-dashboard-middleware'}) | from_yaml_all }}"
        state: present
  when: "traefik_dashboard_enabled"

- name: cert-manager
  block:
    - name: cert-manager - Add chart repo
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: "https://charts.jetstack.io"
        force_update: true
    - name: cert-manager - Install chart
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ cert_manager_version }}"
        create_namespace: true
        release_namespace: cert-manager
        values:
          ingressShim:
            defaultIssuerName: "cluster-issuer"
            defaultIssuerKind: "ClusterIssuer"

          installCRDs: true
        context: "{{ k3s_context_name }}"
    - name: cert-manager - Create ClusterIssuer
      kubernetes.core.k8s:
        namespace: cert-manager
        definition: "{{ lookup('ansible.builtin.template', 'cert_manager_cluster_issuer_spec.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present
    - name: cert-manager - Create Secret
      kubernetes.core.k8s:
        namespace: cert-manager
        definition: "{{ lookup('ansible.builtin.template', 'cert_manager_cluster_issuer_secret.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present

- name: Longhorn
  block:
    - name: Longhorn - Add chart repo
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: "https://charts.longhorn.io"
        force_update: true
    - name: Longhorn - Install chart
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        chart_version: "{{ longhorn_version }}"
        create_namespace: true
        release_namespace: longhorn-system
        values: "{{ longhorn_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: Longhorn - Create middleware
      kubernetes.core.k8s:
        namespace: longhorn-system
        definition: "{{ lookup('ansible.builtin.template', 'traefik_middleware_path.yaml.j2', template_vars = {'strip_prefix_path': 'longhorn'}) | from_yaml_all }}"
        state: present
  when: "longhorn_enabled"

- name: Longhorn
  block:
    - name: Sealed Secrets - Check if exists sealed-secrets-key
      stat:
        path: "{{ sealed_secrets_key }}"
      register: sealed_secrets_key_stat
    - name: Sealed Secrets - Load sealed-secrets-key
      ansible.builtin.shell: |
        kubectl -n sealed-secrets apply -f {{ sealed_secrets_key }}
      when: "sealed_secrets_restore == 'true' and sealed_secrets_key_stat.stat.exists"
    - name: Sealed Secrets - Add chart repo
      kubernetes.core.helm_repository:
        name: hashicorp
        repo_url: "https://bitnami-labs.github.io/sealed-secrets"
        force_update: true
    - name: Sealed Secrets - Install chart
      kubernetes.core.helm:
        name: sealed-secrets
        chart_ref: hashicorp/sealed-secrets
        chart_version: "{{ sealed_secrets_version }}"
        create_namespace: true
        release_namespace: sealed-secrets
        context: "{{ k3s_context_name }}"
    - name: Sealed Secrets - Save sealed-secrets-key
      ansible.builtin.shell: |
        mkdir -p $(dirname {{ sealed_secrets_key }})

        while true; do
            count=$(kubectl -n sealed-secrets get secret -l "sealedsecrets.bitnami.com/sealed-secrets-key" | tail -n +2 | wc -l)

            if [ "$count" -eq 1 ]; then
                pod_names=$(kubectl get pods --namespace=$namespace -o custom-columns=:metadata.name | grep "^$prefix")

                kubectl -n sealed-secrets get secret \
                  -l "sealedsecrets.bitnami.com/sealed-secrets-key" -o yaml \
                  > {{ sealed_secrets_key }}

                exit 0
            else
                echo "Waiting for resource"
                sleep 1
            fi
        done
      when: "not sealed_secrets_key_stat.stat.exists"
  when: "sealed_secrets_enabled"

- name: ArgoCD
  block:
    - name: ArgoCD - Add chart repo
      kubernetes.core.helm_repository:
        name: argo
        repo_url: "https://argoproj.github.io/argo-helm"
        force_update: true
    - name: ArgoCD - Install chart
      kubernetes.core.helm:
        name: argo-cd
        chart_ref: argo/argo-cd
        chart_version: "{{ argocd_version }}"
        create_namespace: true
        release_namespace: argo-cd
        values: "{{ argocd_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: ArgoCD - Create Projects
      kubernetes.core.k8s:
        state: present
        namespace: argo-cd
        definition: "{{ lookup('ansible.builtin.template', 'argocd_project.yaml.j2', template_vars = {'namespace': item}) | from_yaml_all }}"
      with_items: "{{ argocd_namespaces }}"
  when: "sealed_secrets_enabled"
