---
- name: K8s - Set context
  ansible.builtin.shell: |
    kubectl config use-context {{ k3s_context_name }}
  changed_when: true

- name: Set custom config for K3s Helm charts
  kubernetes.core.k8s:
    namespace: oauth2-proxy
    definition: "{{ lookup('ansible.builtin.template', 'k3s_helm_config.yaml.j2', template_vars = {}) | from_yaml_all }}"
    state: present

- name: cert-manager
  block:
    - name: cert-manager - Add chart repo
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: "https://charts.jetstack.io"
        force_update: true
    - name: cert-manager - Install chart
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ cert_manager_helm_version }}"
        create_namespace: true
        release_namespace: cert-manager
        values:
          ingressShim:
            defaultIssuerName: "cluster-issuer"
            defaultIssuerKind: "ClusterIssuer"

          installCRDs: true
        context: "{{ k3s_context_name }}"
    - name: cert-manager - Create ClusterIssuer
      kubernetes.core.k8s:
        namespace: cert-manager
        definition: "{{ lookup('ansible.builtin.template', 'cert_manager_cluster_issuer.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present

- name: external-dns
  block:
    - name: external-dns - Add chart repo
      kubernetes.core.helm_repository:
        name: external-dns
        repo_url: "https://kubernetes-sigs.github.io/external-dns/"
        force_update: true
    - name: external-dns - Create ClusterIssuer
      kubernetes.core.k8s:
        namespace: kube-system
        definition: "{{ lookup('ansible.builtin.template', 'external_dns_secret.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present
    - name: external-dns - Install chart
      kubernetes.core.helm:
        name: external-dns
        chart_ref: external-dns/external-dns
        chart_version: "{{ external_dns_helm_version }}"
        create_namespace: true
        release_namespace: kube-system
        values: "{{ external_dns_helm_values }}"
        context: "{{ k3s_context_name }}"

- name: kubernetes-reflector
  block:
    - name: kubernetes-reflector - Add chart repo
      kubernetes.core.helm_repository:
        name: emberstack
        repo_url: "https://emberstack.github.io/helm-charts"
        force_update: true
    - name: kubernetes-reflector - Install chart
      kubernetes.core.helm:
        name: kubernetes-reflector
        chart_ref: emberstack/reflector
        chart_version: "{{kubernetes_reflector_helm_version }}"
        create_namespace: true
        release_namespace: kube-system
        values: "{{ kubernetes_reflector_helm_values }}"
        context: "{{ k3s_context_name }}"

- name: Security
  block:
    - name: Security - TLS
      block:
        - name: Traefik - Force TLS
          kubernetes.core.k8s:
            namespace: kube-system
            definition: "{{ lookup('ansible.builtin.template', 'traefik_dashboard.yaml.j2', template_vars = {}) | from_yaml_all }}"
            state: present
    - name: Security - Authentication
      block:
        - name: Oauth2 Proxy - Add chart repo
          kubernetes.core.helm_repository:
            name: oauth2-proxy
            repo_url: "https://oauth2-proxy.github.io/manifests"
            force_update: true
        - name: Oauth2 Proxy - Install chart
          kubernetes.core.helm:
            name: oauth2-proxy
            chart_ref: oauth2-proxy/oauth2-proxy
            chart_version: "{{ security_oauth2_helm_version }}"
            create_namespace: true
            release_namespace: security
            values: "{{ security_oauth2_helm_values }}"
            context: "{{ k3s_context_name }}"
        - name: Oauth2 Proxy - Enable traefik Auth
          kubernetes.core.k8s:
            namespace: security
            definition: "{{ lookup('ansible.builtin.template', 'traefik_security.yaml.j2', template_vars = {}) | from_yaml_all }}"
            state: present
      when: "security_enabled"

- name: Longhorn
  block:
    - name: Longhorn - Add chart repo
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: "https://charts.longhorn.io"
        force_update: true
    - name: Longhorn - Install chart
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        chart_version: "{{ longhorn_helm_version }}"
        create_namespace: true
        release_namespace: longhorn-system
        values: "{{ longhorn_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: Longhorn - Tag master nodes
      ansible.builtin.shell: |
        kubectl patch node.longhorn.io {{ item }} --type=json -p='[{"op": "replace", "path": "/spec/tags", "value":["MASTER_NODE"]}]' -n longhorn-system
      retries: 5
      delay: 10
      register: result
      until: result.rc == 0
      with_items: "{{ groups['server'] }}"
    - name: Longhorn - Tag worker nodes
      ansible.builtin.shell: |
        kubectl patch node.longhorn.io {{ item }} --type=json -p='[{"op": "replace", "path": "/spec/tags", "value":["WORKER_NODE"]}]' -n longhorn-system
      retries: 5
      delay: 10
      register: result
      until: result.rc == 0
      with_items: "{{ groups['agent'] }}"
    - name: Longhorn - Tag create-default-disk in master nodes
      ansible.builtin.shell: |
        kubectl label node {{ item }} 'node.longhorn.io/create-default-disk=true'
      with_items: "{{ groups['server'] }}"
      when: "not longhorn_enabled_only_workers"
    - name: Longhorn - Tag create-default-disk in worker nodes
      ansible.builtin.shell: |
        kubectl label node {{ item }} 'node.longhorn.io/create-default-disk=true'
      with_items: "{{ groups['agent'] }}"
  when: "longhorn_enabled"

- name: Sealed Secrets
  block:
    - name: Sealed Secrets - Check if exists sealed-secrets-key
      stat:
        path: "{{ sealed_secrets_key }}"
      register: sealed_secrets_key_stat
    - name: Sealed Secrets - Load sealed-secrets-key
      ansible.builtin.shell: |
        kubectl -n security apply -f {{ sealed_secrets_key }}
      when: "sealed_secrets_restore == 'true' and sealed_secrets_key_stat.stat.exists"
    - name: Sealed Secrets - Add chart repo
      kubernetes.core.helm_repository:
        name: hashicorp
        repo_url: "https://bitnami-labs.github.io/sealed-secrets"
        force_update: true
    - name: Sealed Secrets - Install chart
      kubernetes.core.helm:
        name: sealed-secrets
        chart_ref: hashicorp/sealed-secrets
        chart_version: "{{ sealed_secrets_helm_version }}"
        create_namespace: true
        release_namespace: security
        context: "{{ k3s_context_name }}"
    - name: Sealed Secrets - Save sealed-secrets-key
      ansible.builtin.shell: |
        mkdir -p $(dirname {{ sealed_secrets_key }})

        while true; do
            count=$(kubectl -n security get secret -l "sealedsecrets.bitnami.com/sealed-secrets-key" | tail -n +2 | wc -l)

            if [ "$count" -eq 1 ]; then
                pod_names=$(kubectl get pods --namespace=$namespace -o custom-columns=:metadata.name | grep "^$prefix")

                kubectl -n security get secret \
                  -l "sealedsecrets.bitnami.com/sealed-secrets-key" -o yaml \
                  > {{ sealed_secrets_key }}

                exit 0
            else
                echo "Waiting for resource"
                sleep 1
            fi
        done
      when: "not sealed_secrets_key_stat.stat.exists"
  when: "sealed_secrets_enabled"

- name: ArgoCD
  block:
    - name: ArgoCD - Add chart repo
      kubernetes.core.helm_repository:
        name: argo
        repo_url: "https://argoproj.github.io/argo-helm"
        force_update: true
    - name: ArgoCD - Install chart
      kubernetes.core.helm:
        name: argo-cd
        chart_ref: argo/argo-cd
        chart_version: "{{ argocd_helm_version }}"
        create_namespace: true
        release_namespace: automation
        values: "{{ argocd_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: ArgoCD - Create Projects
      kubernetes.core.k8s:
        state: present
        namespace: automation
        definition: "{{ lookup('ansible.builtin.template', 'argocd_project.yaml.j2', template_vars = {'namespace': item}) | from_yaml_all }}"
      with_items: "{{ argocd_namespaces }}"
  when: "sealed_secrets_enabled"
