---
- name: Update apt repo and cache on all Debian/Ubuntu boxes
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  when: ansible_os_family == 'Debian'

- name: Install base packages
  block:
    - name: Upgrade all packages on debian servers
      apt: name={{ item }} state=latest
      when: ansible_os_family == 'Debian'
      with_items: "{{ base_packages }}"

    - name: Upgrade all packages on arch servers
      pacman: name={{ item }} state=latest
      when: ansible_os_family == 'Archlinux'
      with_items: "{{ base_packages }}"

    - name: Upgrade all packages on redhat servers
      yum: name={{ item }} state=latest
      when: ansible_os_family == 'RedHat'
      with_items: "{{ base_packages }}"

- name: Update packages
  block:
    - name: Upgrade all packages on debian servers
      apt: upgrade=yes force_apt_get=yes
      when: ansible_os_family == 'Debian' and os_upgrade

    - name: Upgrade all packages on arch servers
      pacman: update_cache=yes upgrade=yes
      when: ansible_os_family == 'Archlinux' and os_upgrade

    - name: Upgrade all packages on redhat servers
      yum: name=* state=latest
      when: ansible_os_family == 'RedHat' and os_upgrade

- name: Check if a reboot is needed on all servers
  register: reboot_required_file
  stat: path=/var/run/reboot-required get_md5=no

- name: Reboot the box if kernel updated
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 90
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists

# OS config
- name: Modify remote hosts file
  become: true
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item }}$"
    line: "{{ hostvars[item].external_host | default(hostvars[item].ansible_host) }} {{ item }}"
    state: present
  when: hostvars[item].inventory_hostname is defined
  with_items: "{{ groups['k3s_cluster'] }}"

- name: Modify local hosts file
  lineinfile:
    dest: "{{ etc_hosts_file }}"
    regexp: ".* {{ item }}$"
    line: "{{ hostvars[item].external_host | default(hostvars[item].ansible_host) }} {{ item }}"
    create: true
    state: present
  delegate_to: 127.0.0.1
  when: hostvars[item].inventory_hostname is defined
  with_items: "{{ groups['k3s_cluster'] }}"

- name: Set timezone to UTC
  become: true
  community.general.timezone:
    name: "Etc/UTC"

- name: Wipe extra volumes
  become: true
  community.general.filesystem:
    dev: "/dev/{{ item.value.id }}"
    fstype: "{{ item.value.fstype | default('ext4') }}"
  with_items: "{{ extra_volumes | dict2items }}"
  when: "{{ wipe_extra_volumes }}"

- name: Ensure extra volumes directory
  file:
    path: "{{ item.value.path }}"
    state: directory
  with_items: "{{ extra_volumes | dict2items }}"

- name: Mount extra volumes
  become: true
  mount:
    path: "{{ item.value.path }}"
    src: "/dev/{{ item.value.id }}"
    fstype: "{{ item.value.fstype | default('ext4') }}"
    state: mounted
  with_items: "{{ extra_volumes | dict2items }}"

- name: Create required directories
  become: true
  file:
    path: "{{ item }}"
    state: directory
  with_items: "{{ required_directories }}"
